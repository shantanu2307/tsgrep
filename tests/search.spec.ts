import path from 'path';
import fs from 'fs';
import { search, cleanup } from '../dist';

const FIXTURES_DIR = path.join(__dirname, '__fixtures__');
const STRESS_DIR = path.join(FIXTURES_DIR, 'stress');

function rimrafDir(dir: string) {
  if (!fs.existsSync(dir)) return;
  const entries = fs.readdirSync(dir);
  for (const entry of entries) {
    const full = path.join(dir, entry);
    const stat = fs.lstatSync(full);
    if (stat.isDirectory()) rimrafDir(full);
    else fs.unlinkSync(full);
  }
  fs.rmdirSync(dir);
}

function ensureDir(dir: string) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function makeFileContent(callsPerFile: number): string {
  const lines: string[] = [];
  lines.push('/* autogenerated stress fixture */');
  lines.push('export const noop = () => {};');
  for (let i = 0; i < callsPerFile; i++) {
    const fnName = `fn${i}`;
    lines.push(`function ${fnName}(){ return ${i}; }`);
  }
  for (let i = 0; i < callsPerFile; i++) {
    const fnName = `fn${i}`;
    lines.push(`${fnName}();`);
  }
  return lines.join('\n');
}

const testRunner = async (numberOfFiles: number, callsPerFile: number, interval: number = 10): Promise<void> => {
  ensureDir(FIXTURES_DIR);
  rimrafDir(STRESS_DIR);
  ensureDir(STRESS_DIR);
  const content = makeFileContent(callsPerFile);

  for (let i = 0; i < numberOfFiles; i++) {
    const f = path.join(STRESS_DIR, `file_${i}.ts`);
    fs.writeFileSync(f, content, 'utf-8');
  }

  const expectedMatches = numberOfFiles * callsPerFile;
  const start = Date.now();
  let matches = 0;

  await search(
    'CallExpression',
    chunk => {
      matches += chunk.length;
    },
    { gitignore: true, directories: [STRESS_DIR], interval }
  );

  const durationMs = Date.now() - start;
  console.log(`Found ${matches} CallExpression in ${durationMs} ms across ${numberOfFiles} files.`);
  expect(matches).toBe(expectedMatches);

  rimrafDir(STRESS_DIR);
};

const TEST_CASES = [
  {
    name: 'Small stress test (10000 files, 50 calls each)',
    numberOfFiles: 10000,
    callsPerFile: 50,
    skip: false,
    interval: 10,
  },
  {
    name: 'Large stress test (100 files, 50000 calls each)',
    numberOfFiles: 100,
    callsPerFile: 50000,
    skip: true,
    interval: 10,
  },
];

describe('Search Stress Tests', () => {
  jest.setTimeout(600000);
  afterAll(cleanup);

  TEST_CASES.forEach(tc => {
    const runner = tc.skip ? it.skip : it;
    runner(tc.name, async () => {
      await testRunner(tc.numberOfFiles, tc.callsPerFile, tc.interval);
    });
  });
});
