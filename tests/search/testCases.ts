export const TEST_CASES = [
  {
    name: 'Small stress test (10000 files, 50 calls each)',
    numberOfFiles: 10000,
    callsPerFile: 50,
    expression: 'CallExpression',
    getContent: (callsPerFile: number) => {
      const lines: string[] = ['/* autogenerated stress fixture */', 'export const noop = () => {};'];
      for (let i = 0; i < callsPerFile; i++) lines.push(`function fn${i}(){ return ${i}; }`);
      for (let i = 0; i < callsPerFile; i++) lines.push(`fn${i}();`);
      return lines.join('\n');
    },
    expectedMatches: 500000,
  },
  {
    name: 'Custom test with Identifier search',
    numberOfFiles: 10,
    callsPerFile: 5,
    expression: 'Identifier',
    expectedMatches: 50,
    getContent: (callsPerFile: number) =>
      ['// identifier test content']
        .concat(Array.from({ length: callsPerFile }, (_, i) => `const var${i} = ${i};`))
        .join('\n'),
  },
  {
    name: 'Large stress test (100 files, 50000 calls each)',
    numberOfFiles: 100,
    callsPerFile: 50000,
    expression: 'CallExpression',
    skip: true,
    expectedMatches: 5000000,
    getContent: (callsPerFile: number) => {
      const lines: string[] = ['/* autogenerated stress fixture */', 'export const noop = () => {};'];
      for (let i = 0; i < callsPerFile; i++) lines.push(`function fn${i}(){ return ${i}; }`);
      for (let i = 0; i < callsPerFile; i++) lines.push(`fn${i}();`);
      return lines.join('\n');
    },
  },
  {
    name: 'Variable declaration stress test',
    numberOfFiles: 50,
    callsPerFile: 100,
    expectedMatches: 5000,
    expression: 'VariableDeclaration',
    getContent: (callsPerFile: number) =>
      Array.from({ length: callsPerFile }, (_, i) => `let x${i} = ${i};`).join('\n'),
  },
  {
    name: 'Function declaration stress test',
    numberOfFiles: 20,
    callsPerFile: 200,
    expectedMatches: 4000,
    expression: 'FunctionDeclaration',
    getContent: (callsPerFile: number) =>
      Array.from({ length: callsPerFile }, (_, i) => `function fn${i}() { return ${i}; }`).join('\n'),
  },
  {
    name: 'Arrow function stress test',
    numberOfFiles: 10,
    callsPerFile: 300,
    expectedMatches: 3000,
    expression: 'ArrowFunctionExpression',
    getContent: (callsPerFile: number) =>
      Array.from({ length: callsPerFile }, (_, i) => `const arrow${i} = () => ${i};`).join('\n'),
  },
  {
    name: 'Import declaration stress test',
    numberOfFiles: 5,
    callsPerFile: 100,
    expectedMatches: 500,
    expression: 'ImportDeclaration',
    getContent: (callsPerFile: number) =>
      Array.from({ length: callsPerFile }, (_, i) => `import mod${i} from './mod${i}.js';`).join('\n'),
  },
  {
    name: 'Mixed nodes (calls + identifiers)',
    numberOfFiles: 5,
    callsPerFile: 20,
    expression: 'Identifier',
    expectedMatches: 400,
    getContent: (callsPerFile: number) =>
      Array.from(
        { length: callsPerFile },
        (_, i) => `function f${i}()\n{ const v${i}=${i};\n return v${i}; }\n f${i}();`
      ).join('\n'),
  },
];
